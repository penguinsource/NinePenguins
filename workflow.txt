me placing/moving/flying a pin:

===== CLIENT SIDE ======

- first of all, the server will update me with my state (place, move or fly)

- update gui actions:
	(Extra)- if i'm grabbing a pin and hovering it over other pin indices, 'shadow' those spots
			 if i can actually place my pin there 
			 	(for state place, shadow any pin index i hover my mouse over, IF i can place my pin on that index)
			 	(for state move, i can either select a pin, and neighbours where i can place my pin should be shadowed
			 					OR i can grab a pin and neighbours where i can place my pin should be shadowed)
			 	(for state fly, there might be no need to shadow anything, as there are too many indices to shadow ?? not sure yet.)


(PART 1) :

-check if its my turn
-check if target pin index is available (DEPRECATED ****))

-triage by current state (place, move, fly or remove)

if place
	check if target pin index is available
	check if i have enough pins left to place
	place pin
	decrease pins left to place
	function check for mill
		if a mill occured
			it's still current (my turn) player's turn
			change my current state to remove
			send update to server
		else
			function check game winning conditions
				if game won:
					gameState = "end"
					display message to say player won, dont send anything to server. 
					if server doesn't confirm, then fail !
				else:
					if the current user has 0 pins left to place, set player's gameState to 'move'
					send data to server
	
else if move
	check if target pin index is available
	check if source element (the index im moving the pin from) belongs to me
	check if its a valid move (the target pin is the neighbour of the source pin)
	move pin
	function check for mill
		if a mill occured
			it's still current (my turn) player's turn
			change my current state to remove
			send update to server
		else
			function check game winning conditions
				if game won
					gameState = "end"
					display message to say player won, dont send anything to server. 
					if server doesn't confirm, then fail !
				else if game not won
					set player turn to the other player
					update the other player

case fly
	- check to see if the player is actually in gamestate fly
	- check if the target pin index is available
	- check if the source pin index belongs to the current user
	- fly pin
	-function check for mill
		- if a mill occured
			 - send message to server and let it know current player made a mill.
		  	 - keep the same player's turn.
		  	 - for the player who made the mill: set their gamestate to remove
		- else if no mill occured
			 -check game winning conditions
			 	- if game won
			 		update both players
			 	- else if game not won
			 		- set player turn to the other player
			 		- update the other player

else if fly
	check to see if the player is actually in gamestate fly
	check if target pin index is available
	check if source element belongs to me
	fly pin
	function check for mill
		if a mill occured
			it's still current (my turn) player's turn
			change current state to remove
			 - send message to server and let it know current player made a mill.
		else
			function check game winning conditions
				if game won
					update server
				else if game not won
					set player turn to the other player
					update the other player

else if remove
	check that the player is actually in the 'remove' gamestate
	check if the target pin index belongs to the other player
	check if its a valid move (if all pins on the board are in mills, then it 
	can be deleted. if targetIndex is in a mill but there are other pins that aren't, return error, player should pick another pin)
	remove their pin
	gotta figure out my current state now.. 
		- if i have > 0 pins left to place, set my gamestate to 'place'
		- else if i have 0 pins left to place && > 3 pins overall, set my gamestate to 'move'
		- else if i have 0 pins left to place && 3 pins overall, set my gamestate to 'fly'
	function check game winning conditions (removeAction = true)
		if game won
			send update to server
		else if game not won
			set player turn to the other player
			update server

Handling Server Calls:

placePin
	- check if the gameId matches with the gameId that you have 
	  stored in your gameObj
		- update player turn // required
		- update player state, decrease # of pins to place by player // optional
		- place the pin on the board	// required

-----
// removeAction Boolean is true if this function is called after the player has removed a pin 

function check game winning conditions (param removeAction Boolean)
	- if (removeAction)
		if the other player has < 3 pins, you win !
	- check if the other player can move any pin.. if they cant, i win
		- check this by their current gamestate:
			- for states place and fly, return true
			- for place move, go through each element on the board that belongs
			  to this player and check to see if their neighbour element is empty. if it is, return true
			  else return false;

function check for mill
	- if i made a mill, let me remove one of the other players' pin
	  (conditions: )
	(nice feature to have:)
		- if i hover over my opponents' pin, it should turn red-ish if the pin is removable

-----

handling server calls:
	place, move or fly
		receive updates from server 
			update local game object board
			update current state
			move pin
			if a mill occured, server should update and tell me the 3 pins (should highlight them on the board)
			if a player won the game, server should update and tell me..
	remove
		receive updates from server
			update local game object board
			update current state
			remove pin
			if a player won the game, server should update and tell me..

(PART 2) :

This part is about handling calls from the server, and updating the client-side game object as well as the GUI.
every call needs to receive:
	{gameid, playerTurn, actionType(place, move, fly, remove, win, lose), targetIndex, sourceIndex}

- check to see if the client side gameid matches the gameid received. if it doesnt, print error
- follow the steps in (PART 1).. 
  basically, the game will wait for my user input (placing/	  moving pins.. etc)

- Triage by actionType

===== SERVER SIDE ======

Sending from client to server:

every call needs to receive:
	{authentication (.., .., userid) , gameid, playerTurn, actionObject(actionType (place, move, fly, remove), targetIndex, sourceIndex) }

- get game object using the received gameid (if no game object found or game is not active, return error)
- check to see if the userid is one of the players defined in the game object (else return error).
- check to see if its userid's turn to play

- triage by action Type: (check that the action type received from user matches action type set in the game object)

case place
	- check if target pin index is available
	- check if current user has enough pins left to place another one; 
	    - return error if not, cause the current user should not be in 'place' state if they dont have any pins left to place
	- place pin, decrease the pins left to be placed
	- function check for mill
		if mill occured
			keep same player's turn (player A)
			set player's (A) state to remove, and wait for player to remove a pin
			update the other player (player B) by sending him the placed pin index, and current player turn
			player A gameState = remove, playerTurn = A's id
			emit "placePin:" to the other player (B)
			{gameId, playerid, playerState, pinIndex, playerTurn}
		else if no mill occured
			player turn = player B (the other player)
			check game winning conditions
				if game won:
					gameState = "end"
					emit "placePin": {gameId, playerid, pinIndex, playerTurn, gameState, message} to both players
				else:
					if the current user (A) has 0 pins left to place, set player's gameState to 'move'
					emit "placePin": {gameId, playerid, pinIndex, playerTurn, gameState, newMill}
	
	- send update to both players

case move
	- check if target pin index is available
	- check if the source pin index belongs to the current user
	- check if its a valid move (the target pin is the neighbour of the source pin)
	- move pin (that means update game obj board)
	- function check for mill
		- if a mill occured, 
		  	 - send message to both players letting them know
		  	   one of them made a mill. 
			 - keep the same player's turn
			 - for the player who made the mill: set their gamestate to remove
		- else if no mill occured
			 - check game winning conditions
			 	-if game won
			 		- update both players
			 	-else if game not won
			 		-set player turn to the other player
			 		-update the other player

case fly
	- check to see if the player is actually in gamestate fly
	- check if the target pin index is available
	- check if the source pin index belongs to the current user
	- fly pin
	-function check for mill
		- if a mill occured
			 - send message to both players letting them know one of them made a mill.
		  	 - keep the same player's turn.
		  	 - for the player who made the mill: set their gamestate to remove
		- else if no mill occured
			 -check game winning conditions
			 	- if game won
			 		update both players
			 	- else if game not won
			 		- set player turn to the other player
			 		- update the other player

case remove
	- check that the player is actually in the 'remove' gamestate
	- check that the pin index selected to be removed (targetIndex) belongs 
	  to the other player (so not the one whois current turn it is)
	- check if its a valid move (if all pins on the board are in mills, then it 
	  can be deleted. if targetIndex is in a mill but there are other pins that aren't, return error, player should pick another pin)
	- remove pin
	- gotta figure out my current state now.. 
		-if i have > 0 pins left to place, set my gamestate to 'place'
		- else if i have 0 pins left to place && > 3 pins overall, set my gamestate to 'move'
		- else if i have 0 pins left to place && 3 pins overall, set my gamestate to 'fly'
	- function check game winning conditions (removeAction true)
		- if a player won game
			 - emit to both the game has ended and the winner.. then return
		- if the game has not been won:
			- set player turn to the other player
			- update the other player

function check for mill
	- if i made a mill, let me remove one of the other players' pin
	  (conditions: )
	(nice feature to have:)
		- if i hover over my opponents' pin, it should turn red-ish if the pin is removable

// removeAction Boolean is true if this function is called after the player has removed a pin 
function check game winning conditions (param removeAction Boolean)
	- if (removeAction)
		if the other player has < 3 pins, you win !
	- check if the other player can move any pin.. if they cant, i win
		- check this by their current gamestate:
			- for states place and fly, return true
			- for place move, go through each element on the board that belongs
			  to this player and check to see if their neighbour element is empty. if it is, return true
			  else return false;


****************
Think about cases where check game winning conditions doesnt need to check if 
the other player has < 3 pins.. sometimes its unnecessary

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
API

server game object ('gameObj'):
return {"gameId": gameId,
		"p1id": player1id, 
		"p2id": player2id,
		"p1state": 'place',
		"p2state": 'place',
		"p1userName": '',
		"p2userName": '',
		"p1PlacePins": 9,	// used only for gameState 'place'
		"p2PlacePins": 9,	// used only for gameState 'place'
		"p1PinsLeft":9,
		"p2PinsLeft":9,
		"playerTurn": player1id,
		// "gameState": "place"	// {place, move, fly}

	};

User to Server

placePin
	gameId: 'game_f2ff3f34',	
	userid: 'guest_af3f34453',	// userid of user who placed the pin
	pinIndex: 1,				// the index where user placed pin
	newMill: false 				// if a mill was formed by placing pin at 	
								// pinIndex, newMill will be true


Server to User

placePin
	gameId: 'game_f2ff3f34',	
	userid: 'guest_af3f34453',	// userid of user who placed the pin
	pinIndex: 1,				// the index where user placed pin
	newMill: true 				// if a mill was formed by placing pin at 	
								// pinIndex, newMill will be true. the client
								// will trust the server
	playerTurn: 'guest_af3f34453'	// id of the player whois turn it is
	playerState: 'remove'			// state of the player whois turn it is






>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
MAYBE IN FUTURE:

game object on server ('gameObj'):
{
	gameId: 'game_2f24f13f1',
	p1Obj: {
				id: 'guest_f24f24f24f',
				userName: '',
				placePinsLeft: 9,
				totalPinsLeft: 9,
		   },
	p2Obj: {
				id: 'guest_d1d13dsa',
				userName: '',
				placePinsLeft: 9,
				totalPinsLeft: 9,
		   },
	playerTurnId: 'guest_d1d13dsa',
	gameState: 'place',
	board:
		[
			{ // this is for pin index 0:
				control: 'pinFreePlace',
			 	vNeighbours: [7]
			 	hNeighbours: [1]
			},
			{...}(same thing for each index up to 23. it goes from index 0 to 23)
		]
}